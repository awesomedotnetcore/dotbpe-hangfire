// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskProducerService_2001.proto

#region Designer generated code

using DotBPE.Protocol.Amp;
using DotBPE.Rpc;
using Google.Protobuf;
using System.Threading.Tasks;

namespace DotBPE.Hangfire
{
    //start for class AbstractTaskProducerService
    public abstract class TaskProducerServiceBase : ServiceActor
    {
        protected override int ServiceId => 2001;


        public override Task<AmpMessage> ProcessAsync(AmpMessage req)
        {
            switch (req.MessageId)
            {

                //方法 TaskProducerService.Enqueue
                case 101: return this.ProcessEnqueueAsync(req);

                //方法 TaskProducerService.Schedule
                case 102: return this.ProcessScheduleAsync(req);

                //方法 TaskProducerService.ScheduleSecond
                case 103: return this.ProcessScheduleSecondAsync(req);

                //方法 TaskProducerService.EnqueueTransfor
                case 104: return this.ProcessEnqueueTransforAsync(req);

                //方法 TaskProducerService.ScheduleTransfor
                case 105: return this.ProcessScheduleTransforAsync(req);

                //方法 TaskProducerService.ScheduleSecondTransfor
                case 106: return this.ProcessScheduleSecondTransforAsync(req);

                default: return base.ProcessNotFoundAsync(req);
            }
        }



        //调用委托
        private async Task<AmpMessage> ProcessEnqueueAsync(AmpMessage req)
        {
            EnqueueTaskReq request = null;

            if (req.Data == null)
            {
                request = new EnqueueTaskReq();
            }
            else
            {
                request = EnqueueTaskReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "TaskProducerService.Enqueue";

            var result = await EnqueueAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "TaskProducerService.Enqueue";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<TaskVoidRes>> EnqueueAsync( EnqueueTaskReq req);

        //调用委托
        private async Task<AmpMessage> ProcessScheduleAsync(AmpMessage req)
        {
            ScheduleTaskReq request = null;

            if (req.Data == null)
            {
                request = new ScheduleTaskReq();
            }
            else
            {
                request = ScheduleTaskReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "TaskProducerService.Schedule";

            var result = await ScheduleAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "TaskProducerService.Schedule";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<TaskVoidRes>> ScheduleAsync( ScheduleTaskReq req);

        //调用委托
        private async Task<AmpMessage> ProcessScheduleSecondAsync(AmpMessage req)
        {
            ScheduleTaskReq request = null;

            if (req.Data == null)
            {
                request = new ScheduleTaskReq();
            }
            else
            {
                request = ScheduleTaskReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "TaskProducerService.ScheduleSecond";

            var result = await ScheduleSecondAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "TaskProducerService.ScheduleSecond";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<TaskVoidRes>> ScheduleSecondAsync( ScheduleTaskReq req);

        //调用委托
        private async Task<AmpMessage> ProcessEnqueueTransforAsync(AmpMessage req)
        {
            EnqueueTaskReq request = null;

            if (req.Data == null)
            {
                request = new EnqueueTaskReq();
            }
            else
            {
                request = EnqueueTaskReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "TaskProducerService.EnqueueTransfor";

            var result = await EnqueueTransforAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "TaskProducerService.EnqueueTransfor";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<TaskVoidRes>> EnqueueTransforAsync( EnqueueTaskReq req);

        //调用委托
        private async Task<AmpMessage> ProcessScheduleTransforAsync(AmpMessage req)
        {
            ScheduleTaskReq request = null;

            if (req.Data == null)
            {
                request = new ScheduleTaskReq();
            }
            else
            {
                request = ScheduleTaskReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "TaskProducerService.ScheduleTransfor";

            var result = await ScheduleTransforAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "TaskProducerService.ScheduleTransfor";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<TaskVoidRes>> ScheduleTransforAsync( ScheduleTaskReq req);

        //调用委托
        private async Task<AmpMessage> ProcessScheduleSecondTransforAsync(AmpMessage req)
        {
            ScheduleTaskReq request = null;

            if (req.Data == null)
            {
                request = new ScheduleTaskReq();
            }
            else
            {
                request = ScheduleTaskReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "TaskProducerService.ScheduleSecondTransfor";

            var result = await ScheduleSecondTransforAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "TaskProducerService.ScheduleSecondTransfor";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<TaskVoidRes>> ScheduleSecondTransforAsync( ScheduleTaskReq req);

    }

    //end for class AbstractTaskProducerService
}

#endregion Designer generated code